The cost of software failure is truly staggering. Well known 
individual cases include the Mars Climate Orbiter failure 
(£80 million), Ariane Rocket disaster (£350 million), Pentium 
Chip Division failure (£300 million), and more recently the heartbleed 
bug (est. £400 million).  There are many, many more examples. Even worse, 
failures such as one in the Patriot Missile System and another 
in the Therac-25 radiation system have cost lives. More generally, a 
2008 study by the US government estimated that faulty
software costs the US economy £100 billion
annually.  

There are many successful approaches to software verification
(testing, model checking etc).  One approach is to find mathematical
proofs that guarantees of software correctness. However, the
complexity of modern software means that hand-written mathematical
proofs can be untrustworthy and this has led to a growing desire for
computer-checked proofs of software correctness. 
Programming languages and interactive proof systems like Coq, Agda,
NuPRL and Idris have been developed based on a formal system called
Martin-Löf Type Theory. In these systems, we can not only write
programs, but we can also express properties of programs using types,
and write programs to express proofs that our programs are correct.
In this way, both large mathematical theorems such as the Four Colour
Theorem, and large software systems such as the CompCert C compiler
have been formally verified. However, in such large projects, the
issue of scalability arises: how can we use them to build large
libraries of verified software in an effective way?

This is related to the problem of abstraction: a component in a
software system should be replaceable by another which behaves the
same way even though it may be constructed in a completely different
way. That is, we want an "extensional equality" and we want it to be
computationally well behaved (that is, we want to run programs using this
equality). This is a fundamental and difficult problem which has
remained unsolved for over 40 years, namely the lack of a satisfactory
treatment of equality within verification systems.

But now it looks like we might have a solution! Fields medallist
Vladimir Voevodsky has come up with a completely different take on the
problem by thinking of equalities as paths such as those which occur
in one of the most abstract branches of mathematics, namely homotopy
theory, leading to Homotopy Type Theory (HoTT). In HoTT, two
components are completely interchangeable if they behave the same
way. However, we also want HoTT to be computational; that is, we
want to run our program even if they involve this powerful
abstraction. Currently, there is no proper implementation of
HoTT which satisfies this property. The goal of our project is to
fix that, and to develop tools to make the power of HoTT available to
programmers and verification.

While many are working on the mathematical foundations of this new
theory of equality, we propose to use our programming language skills
to build the first of a new breed of much more powerful programming
language and verification systems based upon HoTT. We can do this
because i) we have unique skills and ideas ranging from the
foundations of HoTT to the implementation and deployment of
programming language and verification tools; and ii) the active
collaboration of the most important figures in the area (including
Voevodsky) as well as industrial participation to ensure that we keep
in mind our ultimate goal -- usable programming language and
verification tools.
